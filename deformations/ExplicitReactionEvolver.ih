/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file ExplicitReactionEvolver.ih
 * @author Tristan Roussillon (\c tristan.roussillon@liris.cnrs.fr )
 * Laboratoire d'InfoRmatique en Image et Syst√®mes d'information - LIRIS (CNRS, UMR 5205), CNRS, France
 *
 * @date 2012/01/09
 *
 * @brief Implementation of inline methods defined in ExplicitReactionEvolver.h
 *
 * This file is part of the DGtal library.
 */



//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// ----------------------- Standard services ------------------------------


template <typename TImage, typename TFunctor>
inline
DGtal::ExplicitReactionEvolver<TImage, TFunctor>
::ExplicitReactionEvolver(const double& anEps, const ExternImage& aF, 
			  const double& aG, bool aFlag)
  : myEpsilon( anEps ), myExternField( &aF ), 
    myG( aG ), myWithVolumeConservation( aFlag )
{ 
}


template <typename TImage, typename TFunctor>
inline
DGtal::ExplicitReactionEvolver<TImage, TFunctor>::~ExplicitReactionEvolver()
{
}


template <typename TImage, typename TFunctor>
inline
void
DGtal::ExplicitReactionEvolver<TImage, TFunctor>::update(Image& aF, const double& aT)
{
  ASSERT(aT >= 0); 

  // Result of the update
  Image next_aF(aF.domain());

  double k = 0; 
  if (myWithVolumeConservation)
    k = force(aF); 

  Domain d = aF.domain();  
  typename Domain::ConstIterator it = d.begin(); 
  typename Domain::ConstIterator itEnd = d.end();
  for ( ; it != itEnd; ++it)
    {
      //old value
      double v = static_cast<double>( aF(*it) );
      //extern force
      double f = static_cast<double>( myExternField->operator()(*it) );
      //gradient modulus
      GodunovGradient<Image> gradient( aF, (myG >= 0) );
      GradientModulus<GodunovGradient<Image> > m( gradient );
      //new value
      double tmp = derivative (v) - myEpsilon * ( myG + f*m(*it) + k) * std::sqrt(2)*sqrt_function(v); 
      Value newValue = v - ( aT / (myEpsilon * myEpsilon ) ) * tmp;  
      next_aF.setValue( *it, static_cast<Value>(newValue) ); 
    }

  // Update
  aF = next_aF;
}


template <typename TImage, typename TFunctor>
inline
void
DGtal::ExplicitReactionEvolver<TImage, TFunctor>::selfDisplay ( std::ostream & out ) const
{
  out << "[ExplicitReactionEvolver]\n";
  out << "\n";
}

template <typename TImage, typename TFunctor>
inline
bool
DGtal::ExplicitReactionEvolver<TImage, TFunctor>::isValid() const
{
  return true;
}

template <typename TImage, typename TFunctor>
inline
double
DGtal::ExplicitReactionEvolver<TImage, TFunctor>::function(const double& aV) const
{
  return 0.5*(aV*aV)*(1-aV)*(1-aV);
}

template <typename TImage, typename TFunctor>
inline
double
DGtal::ExplicitReactionEvolver<TImage, TFunctor>::sqrt_function(const double& aV) const
{
  return std::sqrt(0.5)*aV*(1-aV);
}

template <typename TImage, typename TFunctor>
inline
double
DGtal::ExplicitReactionEvolver<TImage, TFunctor>::derivative(const double& aV) const
{
  return aV*(1-aV)*(1-2*aV);
}

template <typename TImage, typename TFunctor>
inline
double
DGtal::ExplicitReactionEvolver<TImage, TFunctor>::force(Image& aF) const
{
  double numsum = 0; 
  double densum = 0; 

  Domain d = aF.domain();  
  typename Domain::ConstIterator it = d.begin(); 
  typename Domain::ConstIterator itEnd = d.end();
  for ( ; it != itEnd; ++it)
    {
      //value
      double v = static_cast<double>( aF(*it) );
      //extern force
      double f = static_cast<double>( myExternField->operator()(*it) );
      //gradient modulus
      GodunovGradient<Image> gradient( aF, (myG >= 0) );
      GradientModulus<GodunovGradient<Image> > m( gradient );
      //summation
      densum += std::sqrt(2) * sqrt_function(v); 
      numsum += derivative (v)
	      - myEpsilon * ( myG + f * m(*it) ) * std::sqrt(2)*sqrt_function(v); 
    }

  return ( numsum / (myEpsilon*densum) );
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions                                        //

template <typename TImage, typename TFunctor>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out, 
		    const ExplicitReactionEvolver<TImage, TFunctor> & object )
{
  object.selfDisplay( out );
  return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////

/* GNU coding style */
/* vim: set ts=2 sw=2 expandtab cindent cinoptions=>4,n-2,{2,^-2,:2,=2,g0,h2,p5,t0,+2,(0,u0,w1,m1 : */

